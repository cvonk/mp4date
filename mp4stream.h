/* mp4stream. : network byte order layer on top of fstream for use with mp4 files
 * Coert Vonk, in part based on
 *   https://github.com/macmade/MP4Parse
 *   for license see block below
 *
 * (c) Copyright 2015 by Coert Vonk - coertvonk.com
 * Boost Sofware License 1.0, see below
 * All rights reserved.  Use of copyright notice does not imply publication.
 */

/*******************************************************************************
 * Copyright (c) 2011, Jean-David Gadina - www.xs-labs.com
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/* $Id$ */

#ifndef _MP4_BINARY_STREAM_
#pragma once
#define _MP4_BINARY_STREAM_

#include "stdafx.h"
#include <stdint.h>
#include <fstream>
#include <iostream>

class mp4StreamException : public std::exception {
  private:

  protected:
    unsigned int code;

  public:
    enum {
        NoFileName = 0x00,
        OpenError = 0x01
    };
    mp4StreamException( void );
    mp4StreamException( unsigned int c );
    virtual const char * what( void ) const throw();
};

class mp4Stream {
  private:

  protected:
    std::fstream stream;

  public:
    mp4Stream( void );
    mp4Stream( char * filename );
    ~mp4Stream( void );

    uint8_t readUint8( void );
    std::ostream & writeUint8( uint8_t const value );

    uint32_t readUint16( void );
    std::ostream & writeUint16( uint16_t const value );

    uint32_t readUint32( void );
    std::ostream & writeUint32( uint32_t const value );

    uint64_t readUint64( void );
    std::ostream & writeUint64( uint64_t const value );

    bool good( void ) const;
    bool eof( void ) const;
    bool fail( void ) const;
    bool bad( void ) const;
    int peek( void );
    int get( void );
    int sync( void );
    std::streampos tellg( void );
    std::streampos tellp( void );
    std::streamsize readsome( char * s, std::streamsize n );
    std::istream & ignore( std::streamsize n = 1, int delim = EOF );
    std::istream & read( char * s, std::streamsize n );
    std::istream & putback( char c );
    std::istream & unget( void );
    std::istream & seekg( std::streampos pos );
    std::istream & seekg( std::streamoff off, std::ios_base::seekdir dir );
    std::ostream & seekp( std::streampos pos );
    std::ostream & seekp( std::streamoff off, std::ios_base::seekdir dir );
    std::ostream & write( char * s, std::streamsize n );
};

#endif /* MP4_BINARY_STREAM_ */
